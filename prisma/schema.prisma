// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name String @db.VarChar(200)
  email String @db.VarChar(200) @unique
  phoneNumber String @db.Char(11)
  password String @default("")
  discription String? @db.VarChar(300)

  posts Post[]
  postLikes PostLike[]
  comments Comment[]
}

model PostLike {
  userId String
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId String
  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, postId])
}

model Post {
  id String @id @default(uuid())

  title String @db.VarChar(200)
  content String @db.Text
  createdAt DateTime @default(now())

  userId String // FK
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  comments Comment[]
  postLikes PostLike[]
  tags Tag[]
}

model Comment {
  id String @id @default(uuid())
  
  content String @db.VarChar(300)

  parentCommentId String?
  parentComment Comment? @relation("parentComment", fields: [parentCommentId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId String
  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  childComments Comment[] @relation("parentComment")
}

model Tag {
  id String @id @default(uuid())

  name String @db.VarChar(120)

  postId String
  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
// 1 : 1 일때는...
// post Post
// userId String @unique